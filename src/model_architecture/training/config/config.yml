#TODO: tackle class imbalance

create_train_test_dir :
    create_new_dirs : False # Create new train and test dirs based on a random split defined in the model configuration below
    source_path : 'C:\Users\lbierling\OneDrive - KPMG\Projekte\Versicherung-Fehlererkennung\Project\image_recog_git\image_recog_git\insurance_image_recog\data3'
    destination_path : 'C:\Users\lbierling\OneDrive - KPMG\Projekte\Versicherung-Fehlererkennung\Project\image_recog_git\image_recog_git\insurance_image_recog\data3'

image_path: 'C:\Users\lbierling\OneDrive - KPMG\Projekte\Versicherung-Fehlererkennung\Project\image_recog_git\image_recog_git\insurance_image_recog\data3'
model_to_use: 'EfficientNet'
image_stats_path: '../training/config/image_stats.json'
specific_model_name_to_use: 'C:\Users\lbierling\OneDrive - KPMG\Projekte\Versicherung-Fehlererkennung\Project\image_recog_git\image_recog_git\insurance_image_recog\src\model_architecture\56_1.0_best_model_mlflow\data\model.pth'
train_verbosity: # what to print during train steps
        loss: True
        prediction: True
        prediction_probabilities: False
        true_labels: False

validation_verbosity: # what to print during test steps
        loss: True
        prediction: True
        prediction_probabilities: True
        true_labels: True


base_model:
    transformations:
        crop_size: 200
        flip_degrees: 30

vgg19:
    epochs: 1
    batch_size: 64  # TODO: Include test batch size and train, otherwise the last batch of the validations tep distorts the overall test of the epoch
    learning_rate: 0.001
    train_backbone_params: True
    train_test_split_ratio: 0.75
    activation_function: 'tanh'
    early_stopping : False
    classifier_layer:
        - classifier_layer_1:
            - 25088
            - 2
            - 0 # Dropout rate
        #- classifier_layer_2:
        #    - 1096
        #    - 10
        #    - 0

resnet:
    epochs: 100
    batch_size: 16
    learning_rate: 0.001
    train_backbone_params: True
    train_test_split_ratio: 0.8
    activation_function: 'tanh'
    classifier_layer:
        - classifier_layer_1:
            - 512
            - 256
            - 0.2 # Dropout rate
        - classifier_layer_2:
            - 256
            - 6
            - 0

custom1:
    epochs: 50
    batch_size: 16
    learning_rate: 0.0001
    train_backbone_params: True
    train_test_split_ratio: 0.8
    activation_function: 'tanh'
    classifier_layer:
        - classifier_layer_1:
            - 1600
            - 1024
            - 0.2 # Dropout rate
        - classifier_layer_2:
            - 1024
            - 512
            - 0  # Dropout rate
        - classifier_layer_3:
            - 512
            - 6
            - 0 # Dropout rate

efficient_net:
    epochs: 100
    batch_size: 64
    learning_rate: 0.0001
    train_backbone_params: True
    train_test_split_ratio: 0.8
    activation_function: 'leakyrelu'
    early_stopping : False
    classifier_layer:
        - classifier_layer_1:
            - 1280
            - 2
            - 0 # Dropout rate
        #- classifier_layer_2:
        #    - 512
        #    - 10
        #    - 0 # Dropout rate
